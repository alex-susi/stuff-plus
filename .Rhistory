}
## NEW sabRmetrics Package -----------------------------------------------------------
statcast_scraper <- function(start_date, end_date) {
cluster <- parallel::makeCluster(parallel::detectCores())
df <- sabRmetrics::download_baseballsavant(
start_date = start_date,
end_date = end_date,
cl = cluster)
df <- umpire_match(df)
df <- format_append_statcast(df)
parallel::stopCluster(cluster)
return(df)
}
source("Statcast Scraper.R")
library(mgcv)
library(xgboost)
library(foreach)
feature_engineering <- function(df) {
# Mapping system
pitch_mapping <- list(
# Fastballs
"4-Seam Fastball" = "Fastball",
"Sinker" = "Fastball",
# Breaking Balls
"Cutter" = "Breaking Ball",
"Slider" = "Breaking Ball",
"Sweeper" = "Breaking Ball",
"Curveball" = "Breaking Ball",
"Screwball" = "Breaking Ball",
"Knuckle Curve" = "Breaking Ball",
"Slurve" = "Breaking Ball",
# Offspeed
"Changeup" = "Offspeed",
"Split-Finger" = "Offspeed",
"Forkball" = "Offspeed",
# Others
#"Screwball" = "Other",
"Eephus" = "Other",
"Knuckleball" = "Other",
"Other" = "Other",
"Pitch Out" = "Other",
"Slow Curve" = "Other"
)
df <- df %>%
mutate(
# Map pitch_name to cleaned pitch type
pitch_class = recode(pitch_name, !!!pitch_mapping)
) %>%
filter(pitch_class != "Other")
df <- df %>%
mutate(
bat_side = as.factor(bat_side),
pitch_hand = as.factor(pitch_hand),
pitch_name = as.factor(pitch_name),
pitch_type = as.factor(pitch_type),
pitch_class = as.factor(pitch_class),
arm_angle = as.numeric(arm_angle),
effective_speed = as.numeric(effective_speed)
)
# Function to fit and predict effective speed
fit_effective_speed <- function(data) {
tryCatch({
model <- gam(effective_speed ~ s(release_speed_mph, k = 5) +
s(extension, k = 5),
data = data)
data %>%
mutate(effective_speed = if_else(is.na(effective_speed),
predict(model, newdata = .),
effective_speed))
}, error = function(e) data)
}
# Function to fit and predict spin rate
fit_spin_rate <- function(data) {
tryCatch({
model <- gam(release_spin_rate ~ s(release_speed_mph, k = 5) +
s(release_pos_x, k = 5) + s(release_pos_z, k = 5) +
s(horz_break) + s(induced_vert_break),
data = data)
data %>%
mutate(release_spin_rate = if_else(is.na(release_spin_rate),
predict(model, newdata = .),
release_spin_rate))
}, error = function(e) data)
}
# Function to fit and predict arm angle
fit_arm_angle <- function(data) {
tryCatch({
# Attempt to fit a GAM model
model <- gam(arm_angle ~ s(pfx_x, k = 5) + s(pfx_z, k = 5), data = data)
data %>%
mutate(arm_angle = if_else(is.na(arm_angle),
predict(model, newdata = .),
arm_angle))
}, error = function(e) data)
}
# Function to fit and predict spin axis
fit_spin_axis <- function(data) {
tryCatch({
model <- gam(spin_axis ~ s(release_pos_x, k = 5) + s(release_pos_z, k = 5) +
s(pfx_x, k = 5) + s(pfx_z, k = 5),
data = data)
data %>%
mutate(spin_axis = if_else(is.na(spin_axis),
predict(model, newdata = .),
spin_axis))
}, error = function(e) data)
}
# Apply models within each group
df <- df %>%
group_by(pitcher_id, year, pitch_type) %>%
group_split() %>%
lapply(fit_effective_speed) %>%
lapply(fit_spin_rate) %>%
lapply(fit_arm_angle) %>%
lapply(fit_spin_axis) %>%
bind_rows() %>%
as.data.frame() %>%
group_by(pitcher_id, year) %>%
group_split() %>%
lapply(fit_effective_speed) %>%
lapply(fit_spin_rate) %>%
lapply(fit_arm_angle) %>%
lapply(fit_spin_axis) %>%
bind_rows() %>%
as.data.frame() %>%
group_by(pitch_type, year) %>%
group_split() %>%
lapply(fit_effective_speed) %>%
lapply(fit_spin_rate) %>%
lapply(fit_arm_angle) %>%
lapply(fit_spin_axis) %>%
bind_rows() %>%
as.data.frame() %>%
arrange(game_date, game_id, inning, at_bat_number, pitch_number)
# Filter out rows with NA values in the specified columns
columns_to_check <- c(
"pitch_type", "pitch_name", "release_speed_mph", "effective_speed",
"release_spin_rate", "release_pos_x", "release_pos_y", "release_pos_z",
"extension", "arm_angle", "ax", "ay", "az", "vx0", "vy0", "vz0",
"spin_axis", "pfx_x", "pfx_z", "api_break_x_arm",
"api_break_x_batter_in", "api_break_z_with_gravity",
"plate_x", "plate_z", "VAA", "HAA",
"strike_zone_top", "strike_zone_bottom", "zone", "delta_run_exp"
)
df <- df %>%
filter(if_all(all_of(columns_to_check), ~ !is.na(.)))
# Adjusting VAA for Pitch Type and Pitch Height (VAAAA)
df <- df %>%
group_by(pitch_name) %>%
group_modify(~ {
vaa_model <- lm(VAA ~ plate_z, data = .x)
.x %>%
mutate(VAAAA = resid(vaa_model))
}) %>%
ungroup()
# Adjusting HAA for Pitch Type, Location, Handedness and Release Position (HAAAA)
df <- df %>%
group_by(pitch_name) %>%
group_modify(~ {
# Exclude pitch_hand for pitch types with only 1 pitcher handedness
if (n_distinct(.x$pitch_hand) < 2) {
haa_model <- lm(HAA ~ plate_x + release_pos_x, data = .x)
} else {
haa_model <- lm(HAA ~ plate_x + pitch_hand + release_pos_x, data = .x)
}
.x %>%
mutate(HAAAA = resid(haa_model))
}) %>%
ungroup()
# Mirror for left-handed pitchers
df <- df %>%
mutate(ax = ifelse(pitch_hand == "L", -ax, ax),
pfx_x = ifelse(pitch_hand == "L", -pfx_x, pfx_x),
release_pos_x = ifelse(pitch_hand == "L", -release_pos_x , release_pos_x))
# Mean Run Expectancy for each pitch result by count (delta_run_exp_mean Variable)
df <- df %>%
group_by(pitch_result, strikes, balls) %>%
mutate(delta_run_exp_mean = mean(delta_run_exp, na.rm = TRUE),
.groups = "drop")
# Define primary pitch based on highest usage by batter handedness and year
df_primary <- df %>%
group_by(pitcher_id, year, bat_side, pitch_type) %>%
summarise(
pitch_count = n(),
avg_release_speed = mean(release_speed_mph, na.rm = TRUE),
avg_az = mean(az, na.rm = TRUE),
avg_ax = mean(ax, na.rm = TRUE),
avg_ivb = mean(pfx_z, na.rm = TRUE),
avg_hb = mean(api_break_x_arm, na.rm = TRUE),
avg_arm_angle = mean(arm_angle, na.rm = TRUE),
.groups = "drop"
) %>%
group_by(pitcher_id, year, bat_side) %>%
mutate(
usage = pitch_count / sum(pitch_count)
) %>%
ungroup() %>%
arrange(desc(usage)) %>%
distinct(pitcher_id, year, bat_side, .keep_all = TRUE)
# Merge primary pitch data back into the main DataFrame
df <- df %>%
left_join(df_primary, by = c("pitcher_id", "year", "bat_side")) %>%
rename(pitch_type = pitch_type.x,
primary_pitch_type = pitch_type.y)
# Calculate pitch differentials compared to primary pitch
df <- df %>%
mutate(
release_speed_diff = release_speed_mph - avg_release_speed,
az_diff = az - avg_az,
ax_diff = abs(ax - avg_ax),
ivb_diff = pfx_z - avg_ivb,
hb_diff = abs(api_break_x_arm - avg_hb),
arm_angle_diff = arm_angle - avg_arm_angle
)
# Replace missing values for pitchers without a primary pitch defined
df <- df %>%
group_by(pitcher_id, year) %>%
mutate(
avg_release_speed = ifelse(is.na(avg_release_speed),
max(start_speed, na.rm = TRUE),
avg_release_speed),
avg_az = ifelse(is.na(avg_az),
max(az, na.rm = TRUE),
avg_az),
avg_ax = ifelse(is.na(avg_ax),
max(ax, na.rm = TRUE),
avg_ax),
avg_ivb = ifelse(is.na(avg_ivb),
max(pfx_z, na.rm = TRUE),
avg_ivb),
avg_hb = ifelse(is.na(avg_hb),
max(hb, na.rm = TRUE),
avg_hb),
avg_arm_angle = ifelse(is.na(avg_arm_angle),
max(arm_angle, na.rm = TRUE),
avg_arm_angle)) %>%
ungroup() %>%
as.data.frame()
# Final cleaning
df <- df %>%
relocate(pitch_name, .after = pitch_number) %>%
mutate(is_primary = if_else(primary_pitch_type == pitch_type, 1, 0)) %>%
arrange(game_date, game_id, inning, at_bat_number, pitch_number) %>%
select(-.groups)
return(df)
}
data_2024 <- statcast_scraper(start_date = "2024-01-01", end_date = "2024-12-31")
data_2023 <- statcast_scraper(start_date = "2023-01-01", end_date = "2023-12-31")
data_2022 <- statcast_scraper(start_date = "2022-01-01", end_date = "2022-12-31")
data_2021 <- statcast_scraper(start_date = "2021-01-01", end_date = "2021-12-31")
data_2020 <- statcast_scraper(start_date = "2020-01-01", end_date = "2020-12-31")
data_all <- rbind(data_2020, data_2021, data_2022, data_2023, data_2024) %>%
feature_engineering()
remove(data_2020)
remove(data_2021)
remove(data_2022)
remove(data_2023)
remove(data_2024)
source("Statcast Scraper.R")
library(mgcv)
library(xgboost)
library(foreach)
library(SHAPforxgboost)
# Feature Engineering ----------------------------------------------------------------
feature_engineering <- function(df) {
# Mapping system
pitch_mapping <- list(
# Fastballs
"4-Seam Fastball" = "Fastball",
"Sinker" = "Fastball",
# Breaking Balls
"Cutter" = "Breaking Ball",
"Slider" = "Breaking Ball",
"Sweeper" = "Breaking Ball",
"Curveball" = "Breaking Ball",
"Screwball" = "Breaking Ball",
"Knuckle Curve" = "Breaking Ball",
"Slurve" = "Breaking Ball",
# Offspeed
"Changeup" = "Offspeed",
"Split-Finger" = "Offspeed",
"Forkball" = "Offspeed",
# Others
#"Screwball" = "Other",
"Eephus" = "Other",
"Knuckleball" = "Other",
"Other" = "Other",
"Pitch Out" = "Other",
"Slow Curve" = "Other"
)
df <- df %>%
mutate(
# Map pitch_name to cleaned pitch type
pitch_class = recode(pitch_name, !!!pitch_mapping)
) %>%
filter(pitch_class != "Other")
df <- df %>%
mutate(
bat_side = as.factor(bat_side),
pitch_hand = as.factor(pitch_hand),
pitch_name = as.factor(pitch_name),
pitch_type = as.factor(pitch_type),
pitch_class = as.factor(pitch_class),
arm_angle = as.numeric(arm_angle),
effective_speed = as.numeric(effective_speed)
)
# Function to fit and predict effective speed
fit_effective_speed <- function(data) {
tryCatch({
model <- gam(effective_speed ~ s(release_speed_mph, k = 5) +
s(extension, k = 5),
data = data)
data %>%
mutate(effective_speed = if_else(is.na(effective_speed),
predict(model, newdata = .),
effective_speed))
}, error = function(e) data)
}
# Function to fit and predict spin rate
fit_spin_rate <- function(data) {
tryCatch({
model <- gam(release_spin_rate ~ s(release_speed_mph, k = 5) +
s(release_pos_x, k = 5) + s(release_pos_z, k = 5) +
s(horz_break) + s(induced_vert_break),
data = data)
data %>%
mutate(release_spin_rate = if_else(is.na(release_spin_rate),
predict(model, newdata = .),
release_spin_rate))
}, error = function(e) data)
}
# Function to fit and predict arm angle
fit_arm_angle <- function(data) {
tryCatch({
# Attempt to fit a GAM model
model <- gam(arm_angle ~ s(pfx_x, k = 5) + s(pfx_z, k = 5), data = data)
data %>%
mutate(arm_angle = if_else(is.na(arm_angle),
predict(model, newdata = .),
arm_angle))
}, error = function(e) data)
}
# Function to fit and predict spin axis
fit_spin_axis <- function(data) {
tryCatch({
model <- gam(spin_axis ~ s(release_pos_x, k = 5) + s(release_pos_z, k = 5) +
s(pfx_x, k = 5) + s(pfx_z, k = 5),
data = data)
data %>%
mutate(spin_axis = if_else(is.na(spin_axis),
predict(model, newdata = .),
spin_axis))
}, error = function(e) data)
}
# Apply models within each group
df <- df %>%
group_by(pitcher_id, year, pitch_type) %>%
group_split() %>%
lapply(fit_effective_speed) %>%
lapply(fit_spin_rate) %>%
lapply(fit_arm_angle) %>%
lapply(fit_spin_axis) %>%
bind_rows() %>%
as.data.frame() %>%
group_by(pitcher_id, year) %>%
group_split() %>%
lapply(fit_effective_speed) %>%
lapply(fit_spin_rate) %>%
lapply(fit_arm_angle) %>%
lapply(fit_spin_axis) %>%
bind_rows() %>%
as.data.frame() %>%
group_by(pitch_type, year) %>%
group_split() %>%
lapply(fit_effective_speed) %>%
lapply(fit_spin_rate) %>%
lapply(fit_arm_angle) %>%
lapply(fit_spin_axis) %>%
bind_rows() %>%
as.data.frame() %>%
arrange(game_date, game_id, inning, at_bat_number, pitch_number)
# Filter out rows with NA values in the specified columns
columns_to_check <- c(
"pitch_type", "pitch_name", "release_speed_mph", "effective_speed",
"release_spin_rate", "release_pos_x", "release_pos_y", "release_pos_z",
"extension", "arm_angle", "ax", "ay", "az", "vx0", "vy0", "vz0",
"spin_axis", "pfx_x", "pfx_z", "api_break_x_arm",
"api_break_x_batter_in", "api_break_z_with_gravity",
"plate_x", "plate_z", "VAA", "HAA",
"strike_zone_top", "strike_zone_bottom", "zone", "delta_run_exp"
)
df <- df %>%
filter(if_all(all_of(columns_to_check), ~ !is.na(.)))
# Adjusting VAA for Pitch Type and Pitch Height (VAAAA)
df <- df %>%
group_by(pitch_name) %>%
group_modify(~ {
vaa_model <- lm(VAA ~ plate_z, data = .x)
.x %>%
mutate(VAAAA = resid(vaa_model))
}) %>%
ungroup()
# Adjusting HAA for Pitch Type, Location, Handedness and Release Position (HAAAA)
df <- df %>%
group_by(pitch_name) %>%
group_modify(~ {
# Exclude pitch_hand for pitch types with only 1 pitcher handedness
if (n_distinct(.x$pitch_hand) < 2) {
haa_model <- lm(HAA ~ plate_x + release_pos_x, data = .x)
} else {
haa_model <- lm(HAA ~ plate_x + pitch_hand + release_pos_x, data = .x)
}
.x %>%
mutate(HAAAA = resid(haa_model))
}) %>%
ungroup()
# Mirror for left-handed pitchers
df <- df %>%
mutate(ax = ifelse(pitch_hand == "L", -ax, ax),
pfx_x = ifelse(pitch_hand == "L", -pfx_x, pfx_x),
release_pos_x = ifelse(pitch_hand == "L", -release_pos_x , release_pos_x))
# Mean Run Expectancy for each pitch result by count (delta_run_exp_mean Variable)
df <- df %>%
group_by(pitch_result, strikes, balls) %>%
mutate(delta_run_exp_mean = mean(delta_run_exp, na.rm = TRUE),
.groups = "drop")
# Define primary pitch based on highest usage by batter handedness and year
df_primary <- df %>%
group_by(pitcher_id, year, bat_side, pitch_type) %>%
summarise(
pitch_count = n(),
avg_release_speed = mean(release_speed_mph, na.rm = TRUE),
avg_az = mean(az, na.rm = TRUE),
avg_ax = mean(ax, na.rm = TRUE),
avg_ivb = mean(pfx_z, na.rm = TRUE),
avg_hb = mean(api_break_x_arm, na.rm = TRUE),
avg_arm_angle = mean(arm_angle, na.rm = TRUE),
.groups = "drop"
) %>%
group_by(pitcher_id, year, bat_side) %>%
mutate(
usage = pitch_count / sum(pitch_count)
) %>%
ungroup() %>%
arrange(desc(usage)) %>%
distinct(pitcher_id, year, bat_side, .keep_all = TRUE)
# Merge primary pitch data back into the main DataFrame
df <- df %>%
left_join(df_primary, by = c("pitcher_id", "year", "bat_side")) %>%
rename(pitch_type = pitch_type.x,
primary_pitch_type = pitch_type.y)
# Calculate pitch differentials compared to primary pitch
df <- df %>%
mutate(is_primary = if_else(primary_pitch_type == pitch_type, 1, 0)) %>%
mutate(
release_speed_diff = if_else(is_primary == 1, 0,
release_speed_mph - avg_release_speed),
az_diff = if_else(is_primary == 1, 0, az - avg_az),
ax_diff = if_else(is_primary == 1, 0, abs(ax - avg_ax)),
ivb_diff = if_else(is_primary == 1, 0, pfx_z - avg_ivb),
hb_diff = if_else(is_primary == 1, 0, abs(api_break_x_arm - avg_hb)),
arm_angle_diff = if_else(is_primary == 1, 0, arm_angle - avg_arm_angle)
)
# Replace missing values for pitchers without a primary pitch defined
df <- df %>%
group_by(pitcher_id, year) %>%
mutate(
avg_release_speed = ifelse(is.na(avg_release_speed),
max(start_speed, na.rm = TRUE),
avg_release_speed),
avg_az = ifelse(is.na(avg_az),
max(az, na.rm = TRUE),
avg_az),
avg_ax = ifelse(is.na(avg_ax),
max(ax, na.rm = TRUE),
avg_ax),
avg_ivb = ifelse(is.na(avg_ivb),
max(pfx_z, na.rm = TRUE),
avg_ivb),
avg_hb = ifelse(is.na(avg_hb),
max(hb, na.rm = TRUE),
avg_hb),
avg_arm_angle = ifelse(is.na(avg_arm_angle),
max(arm_angle, na.rm = TRUE),
avg_arm_angle)) %>%
ungroup() %>%
as.data.frame()
# Final cleaning
df <- df %>%
relocate(pitch_name, .after = pitch_number) %>%
relocate(pitch_class, .after = pitch_type) %>%
relocate(VAAAA, .after = VAA) %>%
relocate(HAAAA, .after = HAA) %>%
arrange(game_date, game_id, inning, at_bat_number, pitch_number) %>%
select(-.groups)
return(df)
}
data_all <- data_all %>% feature_engineering()
rlang::last_trace()
data_all <- statcast_scraper(start_date = "2020-01-01", end_date = "2024-12-31") %>%
feature_engineering()
data_2024 <- statcast_scraper(start_date = "2024-01-01", end_date = "2024-12-31")
warnings()
devtools::install_github("rmcelreath/rethinking",ref="Experimental")
devtools::install_github("stan-dev/cmdstanr")
devtools::install_github("rmcelreath/rethinking",ref="Experimental")
data_2023 <- statcast_scraper(start_date = "2023-01-01", end_date = "2023-12-31")
data_2022 <- statcast_scraper(start_date = "2022-01-01", end_date = "2022-12-31")
data_2021 <- statcast_scraper(start_date = "2021-01-01", end_date = "2021-12-31")
data_2020 <- statcast_scraper(start_date = "2020-01-01", end_date = "2020-12-31")
data_all <- rbind(data_2020, data_2021, data_2022, data_2023, data_2024) %>%
feature_engineering()
